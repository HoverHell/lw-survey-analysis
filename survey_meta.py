import re
import time
import statistics
import sqlite3
import numpy as np
from matplotlib import pyplot
import argparse


parser = argparse.ArgumentParser()
parser.add_argument("database", help="The sqlite database to read results from.")
arguments = parser.parse_args()

db_conn = sqlite3.connect(arguments.database)
cursor = db_conn.cursor()

keys = [
 'GeneralPrivacy',
 'ResearchConsent',
 'Age',
 'BirthSex',
 'BirthSex[other]',
 'Gender',
 'Gender[other]',
 'Country',
 'Country[other]',
 'Race',
 'Race[other]',
 'SexualOrientation',
 'SexualOrientation[other]',
 'Asexuality',
 'RelationshipStyle',
 'RelationshipStyle[other]',
 'NumberPartners',
 'RelationshipGoals',
 'Married',
 'LivingWith',
 'LivingWith[other]',
 'Children',
 'MoreChildren',
 'WorkStatus[1]',
 'WorkStatus[2]',
 'WorkStatus[3]',
 'WorkStatus[4]',
 'WorkStatus[5]',
 'WorkStatus[6]',
 'WorkStatus[7]',
 'WorkStatus[8]',
 'WorkStatus[9]',
 'Profession',
 'Profession[other]',
 'EducationCredentials',
 'EducationCredentials[other]',
 'IQ',
 'IQAge',
 'IQType',
 'SAT',
 'SAT2',
 'ACT',
 'PoliticsShort',
 'ReligiousViews',
 'ReligionType',
 'ReligionType[other]',
 'FamilyReligion',
 'FamilyReligion[other]',
 'ReligiousBackground',
 'ReligiousBackground[other]',
 'MetaEthics',
 'ReferredBy',
 'ReferredBy[other]',
 'LessWrongUse',
 'LWUseFrequency',
 'LWLastPosted',
 'Sequences',
 'Meetups',
 'Community',
 'Romance',
 'RokoKnowledge',
 'RokoKnowledgeSource',
 'RokoKnowledgeSource[other]',
 'BasiliskCorrectness',
 'BasiliskDanger',
 'BasiliskAnxiety',
 'BAnxietyDegree',
 'BasiliskAnxietyNow',
 'Depression',
 'OCD',
 'ASD',
 'ADHD',
 'BipolarDisorder',
 'AnxietyDisorder',
 'BPD',
 'Schizophrenia',
 'SubstanceUseDisorder',
 'SubstanceUseWonder',
 'SubstanceUseWorry',
 'PeakPhilosophyIssues[1]',
 'PeakPhilosophyIssues[2]',
 'PeakPhilosophyIssues[3]',
 'PeakPhilosophyIssues[4]',
 'PeakPhilosophyIssues[6]',
 'PeakPhilosophyIssues[7]',
 'PeakPhilosophyIssues[8]',
 'PeakPhilosophyIssues[9]',
 'PeakPhilosophyIssues[10]',
 'PeakPhilWriteInOne',
 'PeakPhilWriteInTwo',
 'PeakCommunityIssues[1]',
 'PeakCommunityIssues[2]',
 'PeakCommunityIssues[3]',
 'PeakCommunityIssues[4]',
 'PeakCommunityIssues[5]',
 'PeakCommunityIssues[6]',
 'PeakCommunityIssues[7]',
 'PeakCommunityIssues[8]',
 'PeakCommunityIssues[9]',
 'PeakCommunityIssues[10]',
 'PeakCommunityIssues[11]',
 'PeakCommunityIssues[12]',
 'PeakCommunityIssues[13]',
 'PeakCommunityIssues[14]',
 'PeakCommunityIssues[15]',
 'PeakCommWriteInOne',
 'PeakCommWriteInTwo',
 'PhilosophyIssuesNow[1]',
 'PhilosophyIssuesNow[2]',
 'PhilosophyIssuesNow[3]',
 'PhilosophyIssuesNow[4]',
 'PhilosophyIssuesNow[5]',
 'PhilosophyIssuesNow[6]',
 'PhilosophyIssuesNow[7]',
 'PhilosophyIssuesNow[8]',
 'NowPhilWriteInOne',
 'NowPhilWriteInTwo',
 'CommunityIssuesNow[1]',
 'CommunityIssuesNow[2]',
 'CommunityIssuesNow[3]',
 'CommunityIssuesNow[4]',
 'CommunityIssuesNow[5]',
 'CommunityIssuesNow[6]',
 'CommunityIssuesNow[7]',
 'CommunityIssuesNow[8]',
 'CommunityIssuesNow[9]',
 'CommunityIssuesNow[10]',
 'CommunityIssuesNow[11]',
 'CommunityIssuesNow[12]',
 'CommunityIssuesNow[13]',
 'CommunityIssuesNow[14]',
 'CommunityIssuesNow[15]',
 'CommunityIssuesNow[16]',
 'CommunityIssuesNow[17]',
 'CommunityIssuesNow[18]',
 'CommunityIssuesNow[19]',
 'NowCIssueWriteInOne',
 'NowCIssueWriteInTwo',
 'SuccessorPhilosophy[1]',
 'SuccessorPhilosophy[2]',
 'SuccessorPhilosophy[3]',
 'SuccessorPhilosophy[4]',
 'SuccessorPhilosophy[5]',
 'SuccessorPhilosophy[6]',
 'SuccessorPhilosophy[7]',
 'SuccessorPhilosophy[8]',
 'PhilosophyWriteIn1',
 'PhilosophyWriteIn2',
 'PhilosophyWriteIn3',
 'SuccessorCommunity[1]',
 'SuccessorCommunity[2]',
 'SuccessorCommunity[3]',
 'SuccessorCommunity[4]',
 'SuccessorCommunity[5]',
 'SuccessorCommunity[6]',
 'SuccessorCommunity[7]',
 'SuccessorCommunity[8]',
 'CommunityWriteIn1',
 'CommunityWriteIn2',
 'CommunityWriteIn3',
 'ActiveMemberships[1]',
 'ActiveMemberships[2]',
 'ActiveMemberships[3]',
 'ActiveMemberships[4]',
 'ActiveMemberships[5]',
 'ActiveMemberships[6]',
 'ActiveMemberships[7]',
 'ActiveMemberships[8]',
 'ActiveMemberships[9]',
 'ActiveMemberships[10]',
 'ActiveMemberships[11]',
 'ActiveMemberships[12]',
 'ActiveMemberships[13]',
 'ActiveMemberships[14]',
 'ActiveMemberships[15]',
 'ActiveMemberships[16]',
 'ActiveMemberships[17]',
 'ActiveMemberships[18]',
 'ActiveMemberships[19]',
 'ActiveMemberships[20]',
 'ActiveMemberships[21]',
 'ActiveMemberships[22]',
 'ActiveMemberships[other]',
 'ComingBack',
 'RejoinConditions[1]',
 'RejoinConditions[2]',
 'RejoinConditions[3]',
 'RejoinConditions[4]',
 'RejoinConditions[5]',
 'BlogsRead[1]',
 'BlogsRead[2]',
 'BlogsRead[3]',
 'BlogsRead[4]',
 'BlogsRead[5]',
 'BlogsRead[6]',
 'BlogsRead[7]',
 'BlogsRead[8]',
 'BlogsRead[9]',
 'BlogsRead2[1]',
 'BlogsRead2[2]',
 'BlogsRead2[3]',
 'BlogsRead2[4]',
 'BlogsRead2[5]',
 'BlogsRead2[6]',
 'BlogsRead2[7]',
 'BlogsRead2[8]',
 'BlogsRead2[9]',
 'BlogsReadWriteIn[SQ001]',
 'BlogsReadWriteIn[SQ2]',
 'BlogsReadWriteIn[SQ3]',
 'BlogsReadWriteIn[SQ4]',
 'StoriesRead[1]',
 'StoriesRead[2]',
 'StoriesRead[3]',
 'StoriesRead[4]',
 'StoriesRead[5]',
 'StoriesRead[6]',
 'StoriesRead[7]',
 'StoriesRead[8]',
 'StoriesRead[9]',
 'StoriesRead2[1]',
 'StoriesRead2[2]',
 'StoriesRead2[3]',
 'StoriesRead2[4]',
 'StoriesRead2[5]',
 'StoriesRead2[6]',
 'StoriesRead2[7]',
 'StoriesRead2[8]',
 'StoriesRead2[9]',
 'MIRIKnowledge',
 'ReadMIRIPaper',
 'MIRIJob',
 'AIBoxing',
 'AIBoxingPractice',
 'MIRIMission',
 'MIRIEffectiveness',
 'CFARKnowledge',
 'CFARAttendance',
 'HowDifferent',
 'WhatDifferent',
 'ChangesToRoutines',
 'CFAROpinion',
 'EAKnowledge',
 'EAIdentity',
 'EACommunity',
 'EADonations',
 'EAAnxiety',
 'EAOpinion',
 'ComplexAffiliation',
 'ComplexAffiliation[other]',
 'Voting',
 'AmericanParties',
 'PoliticalInterest',
 'AbortionLaws[SQ001]',
 'Immigration[SQ001]',
 'Taxes[SQ001]',
 'MinimumWage[SQ001]',
 'Feminism[SQ001]',
 'SocialJustice[SQ001]',
 'HumanBiodiversity[SQ001]',
 'BasicIncome[SQ001]',
 'GreatStagnation[SQ001]',
 'InstructionsConfirm',
 'CalibrationQuestions[1]',
 'CalibrationQuestions[2]',
 'CalibrationQuestions[3]',
 'CalibrationQuestions[4]',
 'CalibrationQuestions[5]',
 'CalibrationQuestions[6]',
 'CalibrationQuestions[7]',
 'CalibrationQuestions[8]',
 'CalibrationQuestions[9]',
 'CalibrationQuestions[10]',
 'CalibrationQuestions[11]',
 'CalibrationQuestions[12]',
 'CalibrationQuestions[13]',
 'CalibrationQuestions[14]',
 'CalibrationQuestions[15]',
 'CalibrationQuestions[16]',
 'ProbabilityQuestions[1]',
 'ProbabilityQuestions[2]',
 'ProbabilityQuestions[3]',
 'ProbabilityQuestions[4]',
 'ProbabilityQuestions[5]',
 'ProbabilityQuestions[6]',
 'ProbabilityQuestions[7]',
 'ProbabilityQuestions[8]',
 'ProbabilityQuestions[9]',
 'ProbabilityQuestions[10]',
 'ProbabilityQuestions[11]',
 'ProbabilityQuestions[12]',
 'CryonicsText',
 'Cryonics',
 'CryonicsNow',
 'CryonicsPossibility',
 'SingularityText',
 'SingularityYear',
 'SingularityHealth',
 'SingularityHealth[comment]',
 'SuperbabiesText',
 'ModifyOffspring',
 'GeneticTreament',
 'GeneticImprovement',
 'GeneticCosmetic',
 'GeneticOpinionD',
 'GeneticOpinionI',
 'GeneticOpinionC',
 'LudditeFallacy',
 'UnemploymentYear',
 'EndOfWork',
 'EndOfWorkConcerns[1]',
 'EndOfWorkConcerns[2]',
 'EndOfWorkConcerns[3]',
 'EndOfWorkConcerns[4]',
 'EndOfWorkConcerns[other]',
 'XRiskTextDisplay',
 'XRiskType',
 'XRiskType[other]',
 'Income',
 'IncomeCharityPortion',
 'XriskCharity',
 'CharityDonations[1]',
 'CharityDonations[2]',
 'CharityDonations[3]',
 'CharityDonations[4]',
 'CharityDonations[5]',
 'CharityDonations[6]',
 'CharityDonations[7]',
 'CharityDonations[8]',
 'CharityDonations[9]',
 'CharityDonations[10]',
 'CharityDonations[11]',
 'CharityDonations[12]',
 'CharityDonations[13]',
 'CharityDonations[14]',
 'CharityDonations[15]',
 'Vegetarian',
 'PreviousSurvey',
 'EmailAddress']

cursor.execute("select count(*) from data;")
total_respondents = cursor.fetchone()[0]
y = []

for key in keys:
    csv_conv = re.compile("\[(.*)\]")
    if csv_conv.search(key):
        key = csv_conv.sub("_\g<1>", key)
    cursor.execute("select " + key + " from data;")
    qdata = [value[0] for value in cursor.fetchall()]
    none_count = qdata.count(None)
    na_count = qdata.count("N/A")
    y.append(total_respondents - (none_count + na_count))
x = [i for i in range(len(keys))]

pyplot.xlabel("Position of question on survey".title())
pyplot.ylabel("Number of respondents".title())
pyplot.title("Question response rate versus survey length".title())
pyplot.scatter(x,y)
pyplot.show()

# Calculate total time spent on the survey
cursor.execute("select startdate, submitdate from data;")
rows = cursor.fetchall()
times = [] # List of time each respondent spent in seconds
for row in rows:
    (start_time, end_time) = row
    try:
        times.append(end_time - start_time)
    except TypeError:
        continue
hours = (sum(times) / 60) / 60
print("Survey hours spent in total:", hours)

avg_minutes = statistics.mean(times) / 60
median_minutes = statistics.median(times) / 60
mode_minutes = statistics.mode(times) / 60
print("Average number of minutes spent on survey:", avg_minutes)
print("Median number of minutes spent on survey:", median_minutes)
print("Mode minutes spent on survey:", mode_minutes)
